// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DB.Models.DatabaseObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DatabaseObject");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HardwareSoftware", b =>
                {
                    b.Property<int>("HardwaresId")
                        .HasColumnType("integer");

                    b.Property<int>("SoftwaresId")
                        .HasColumnType("integer");

                    b.HasKey("HardwaresId", "SoftwaresId");

                    b.HasIndex("SoftwaresId");

                    b.ToTable("HardwareSoftware");
                });

            modelBuilder.Entity("DB.Models.Departments.Cabinet", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Cabinet", (string)null);
                });

            modelBuilder.Entity("DB.Models.Departments.Department", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("DB.Models.Equipment.ComplexHardware", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.Property<string>("InventoryNumber")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("UserId");

                    b.ToTable("ComplexHardware", (string)null);
                });

            modelBuilder.Entity("DB.Models.Equipment.Hardware", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.Property<string>("Article")
                        .HasColumnType("text");

                    b.Property<int?>("ComplexHardwareId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateCreate")
                        .HasColumnType("date");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasIndex("ComplexHardwareId");

                    b.ToTable("Hardware", (string)null);
                });

            modelBuilder.Entity("DB.Models.Equipment.Software", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.ToTable("Software", (string)null);
                });

            modelBuilder.Entity("DB.Models.Users.JobTitle", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.ToTable("JobTitle", (string)null);
                });

            modelBuilder.Entity("DB.Models.Users.User", b =>
                {
                    b.HasBaseType("DB.Models.DatabaseObject");

                    b.Property<int?>("CabinetId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasIndex("CabinetId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("HardwareSoftware", b =>
                {
                    b.HasOne("DB.Models.Equipment.Hardware", null)
                        .WithMany()
                        .HasForeignKey("HardwaresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Equipment.Software", null)
                        .WithMany()
                        .HasForeignKey("SoftwaresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Departments.Cabinet", b =>
                {
                    b.HasOne("DB.Models.Departments.Department", "Department")
                        .WithMany("Cabinets")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Departments.Cabinet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DB.Models.Departments.Department", b =>
                {
                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Departments.Department", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Equipment.ComplexHardware", b =>
                {
                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Equipment.ComplexHardware", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Users.User", "User")
                        .WithMany("ComplexHardwares")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Equipment.Hardware", b =>
                {
                    b.HasOne("DB.Models.Equipment.ComplexHardware", "ComplexHardware")
                        .WithMany("Hardwares")
                        .HasForeignKey("ComplexHardwareId");

                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Equipment.Hardware", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplexHardware");
                });

            modelBuilder.Entity("DB.Models.Equipment.Software", b =>
                {
                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Equipment.Software", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Users.JobTitle", b =>
                {
                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Users.JobTitle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Models.Users.User", b =>
                {
                    b.HasOne("DB.Models.Departments.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId");

                    b.HasOne("DB.Models.DatabaseObject", null)
                        .WithOne()
                        .HasForeignKey("DB.Models.Users.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Users.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.Navigation("Cabinet");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("DB.Models.Departments.Department", b =>
                {
                    b.Navigation("Cabinets");
                });

            modelBuilder.Entity("DB.Models.Equipment.ComplexHardware", b =>
                {
                    b.Navigation("Hardwares");
                });

            modelBuilder.Entity("DB.Models.Users.User", b =>
                {
                    b.Navigation("ComplexHardwares");
                });
#pragma warning restore 612, 618
        }
    }
}
